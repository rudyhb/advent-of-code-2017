use log::info;

pub(crate) fn run() {
    let input = "21752342814933766938172121674976879111362417653261522357855816893656462449168377359285244818489723869987861247912289729579296691684761143544956991583942215236568961875851755854977946147178746464675227699149925227227137557479769948569788884399379821111382536722699575759474473273939756348992714667963596189765734743169489599125771443348193383566159843593541134749392569865481578359825844394454173219857919349341442148282229689541561169341622222354651397342928678496478671339383923769856425795211323673389723181967933933832711545885653952861879231537976292517866354812943192728263269524735698423336673735158993853556148833861327959262254756647827739145283577793481526768156921138428318939361859721778556264519643435871835744859243167227889562738712953651128317624673985213525897522378259178625416722152155728615936587369515254936828668564857283226439881266871945998796488472249182538883354186573925183152663862683995449671663285775397453876262722567452435914777363522817594741946638986571793655889466419895996924122915777224499481496837343194149123735355268151941712871245863553836953349887831949788869852929147849489265325843934669999391846286319268686789372513976522282587526866148166337215961493536262851512218794139272361292811529888161198799297966893366553115353639298256788819385272471187213579185523521341651117947676785341146235441411441813242514813227821843819424619974979886871646621918865274574538951761567855845681272364646138584716333599843835167373525248547542442942583122624534494442516259616973235858469131159773167334953658673271599748942956981954699444528689628848694446818825465485122869742839711471129862632128635779658365756362863627135983617613332849756371986376967117549251566281992964573929655589313871976556784849231916513831538254812347116253949818633527185174221565279775766742262687713114114344843534958833372634182176866315441583887177759222598853735114191874277711434653854816841589229914164681364497429324463193669337827467661773833517841763711156376147664749175267212562321567728575765844893232718971471289841171642868948852136818661741238178676857381583155547755219837116125995361896562498721571413742";
    println!("the answer is {}", solve_v2(input));
}

#[allow(unused)]
fn solve(input: &str) -> u32 {
    let first_digit = input.chars().next().unwrap();
    let mut sum = 0;
    let mut last = first_digit;
    for c in input.chars().skip(1) {
        if last == c {
            sum += last.to_digit(10).unwrap();
        }
        last = c;
    }
    if last == first_digit {
        sum += last.to_digit(10).unwrap();
    }
    info!("input sequence '{}' gives result {}", input, sum);
    sum
}

#[allow(unused)]
fn solve_v2(input: &str) -> u32 {
    let chars: Vec<_> = input.chars().collect();
    let mut sum = 0;
    for i in 0..chars.len() {
        let j = (chars.len() / 2 + i) % chars.len();
        if chars[i] == chars[j] {
            sum += chars[i].to_digit(10).unwrap();
        }
    }
    info!("input sequence '{}' gives result {}", input, sum);
    sum
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test1() {
        assert_eq!(solve("1122"), 3);
    }
    #[test]
    fn test2() {
        assert_eq!(solve("1111"), 4);
    }
    #[test]
    fn test3() {
        assert_eq!(solve("1234"), 0);
    }
    #[test]
    fn test4() {
        assert_eq!(solve("91212129"), 9);
    }
    #[test]
    fn test_b_1() {
        assert_eq!(solve_v2("1212"), 6);
    }
    #[test]
    fn test_b_2() {
        assert_eq!(solve_v2("1221"), 0);
    }
    #[test]
    fn test_b_3() {
        assert_eq!(solve_v2("123425"), 4);
    }
    #[test]
    fn test_b_4() {
        assert_eq!(solve_v2("123123"), 12);
    }
    #[test]
    fn test_b_5() {
        assert_eq!(solve_v2("12131415"), 4);
    }
}
